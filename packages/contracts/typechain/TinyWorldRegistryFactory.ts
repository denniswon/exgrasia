/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TinyWorldRegistry } from "./TinyWorldRegistry";

export class TinyWorldRegistryFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TinyWorldRegistry> {
    return super.deploy(overrides || {}) as Promise<TinyWorldRegistry>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TinyWorldRegistry {
    return super.attach(address) as TinyWorldRegistry;
  }
  connect(signer: Signer): TinyWorldRegistryFactory {
    return super.connect(signer) as TinyWorldRegistryFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TinyWorldRegistry {
    return new Contract(address, _abi, signerOrProvider) as TinyWorldRegistry;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    name: "appendWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "realAddresses",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "proxyAddress",
        type: "address",
      },
    ],
    name: "dummySetProxyAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_realAddress",
        type: "address",
      },
    ],
    name: "getProxyAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_proxyAddress",
        type: "address",
      },
    ],
    name: "getRealAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "proxyAddressToRealAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "realAddressToProxyAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_proxyAddress",
        type: "address",
      },
    ],
    name: "setProxyAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistAddresses",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610787806100326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806349fe72ed1161006657806349fe72ed146101425780635d7a59181461016e5780635dc8b5971461019757806369ddd67d146101aa578063fa2a5b01146101cd57600080fd5b806308fc5d8714610098578063204b08ba146100de5780633af32abf146100f357806346a7dadc1461012f575b600080fd5b6100c16100a6366004610621565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec36600461067d565b6101f9565b005b61011f610101366004610621565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020016100d5565b6100f161013d366004610621565b610399565b6100c1610150366004610621565b6001600160a01b039081166000908152600360205260409020541690565b6100c161017c366004610621565b6002602052600090815260409020546001600160a01b031681565b6100f16101a5366004610642565b6104d0565b61011f6101b8366004610621565b60016020526000908152604090205460ff1681565b6100c16101db366004610621565b6001600160a01b039081166000908152600260205260409020541690565b60005b825181101561039457600083828151811061022757634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0381166000908152600190925260409091205490915060ff166102785760405162461bcd60e51b815260040161026f906106c9565b60405180910390fd5b6001600160a01b0381811660009081526002602052604090205416156102dc5760405162461bcd60e51b8152602060048201526019602482015278141c9bde1e481859191c995cdcc8185b1c9958591e481cd95d603a1b604482015260640161026f565b6001600160a01b03838116600090815260036020526040902054161561033f5760405162461bcd60e51b81526020600482015260186024820152771499585b081859191c995cdcc8185b1c9958591e481cd95d60421b604482015260640161026f565b6001600160a01b03908116600081815260026020908152604080832080549588166001600160a01b0319968716811790915583526003909152902080549092161790558061038c81610714565b9150506101fc565b505050565b3360009081526001602052604090205460ff166103c85760405162461bcd60e51b815260040161026f906106c9565b336000908152600260205260409020546001600160a01b03161561042a5760405162461bcd60e51b8152602060048201526019602482015278141c9bde1e481859191c995cdcc8185b1c9958591e481cd95d603a1b604482015260640161026f565b6001600160a01b03818116600090815260036020526040902054161561048d5760405162461bcd60e51b81526020600482015260186024820152771499585b081859191c995cdcc8185b1c9958591e481cd95d60421b604482015260640161026f565b33600081815260026020908152604080832080546001600160a01b039096166001600160a01b031996871681179091558352600390915290208054909216179055565b6000546001600160a01b031633146104e757600080fd5b60005b815181101561055c57600180600084848151811061051857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061055481610714565b9150506104ea565b5050565b80356001600160a01b038116811461057757600080fd5b919050565b600082601f83011261058c578081fd5b8135602067ffffffffffffffff808311156105a9576105a961073b565b8260051b604051601f19603f830116810181811084821117156105ce576105ce61073b565b604052848152838101925086840182880185018910156105ec578687fd5b8692505b858310156106155761060181610560565b8452928401926001929092019184016105f0565b50979650505050505050565b600060208284031215610632578081fd5b61063b82610560565b9392505050565b600060208284031215610653578081fd5b813567ffffffffffffffff811115610669578182fd5b6106758482850161057c565b949350505050565b6000806040838503121561068f578081fd5b823567ffffffffffffffff8111156106a5578182fd5b6106b18582860161057c565b9250506106c060208401610560565b90509250929050565b6020808252602b908201527f4f6e6c792077686974656c6973746564206164647265737365732063616e207060408201526a6c617920666f72206e6f7760a81b606082015260800190565b600060001982141561073457634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206c239e817c3f918c1fa758f89b8ed3e85f159aeeb677b84e04b740e47a86ddb964736f6c63430008040033";
