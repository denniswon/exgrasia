/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TinyWorldStorageInterface extends ethers.utils.Interface {
  functions: {
    "cachedTiles(uint256,uint256)": FunctionFragment;
    "getCachedTile(tuple)": FunctionFragment;
    "getTouchedTiles()": FunctionFragment;
    "seed()": FunctionFragment;
    "touchedTiles(uint256)": FunctionFragment;
    "transitions(uint8,uint8)": FunctionFragment;
    "wheatScore(address)": FunctionFragment;
    "woodScore(address)": FunctionFragment;
    "worldScale()": FunctionFragment;
    "worldWidth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cachedTiles",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCachedTile",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getTouchedTiles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "touchedTiles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transitions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wheatScore", values: [string]): string;
  encodeFunctionData(functionFragment: "woodScore", values: [string]): string;
  encodeFunctionData(
    functionFragment: "worldScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldWidth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cachedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCachedTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTouchedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "touchedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wheatScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "woodScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "worldScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "worldWidth", data: BytesLike): Result;

  events: {};
}

export class TinyWorldStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TinyWorldStorageInterface;

  functions: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      originalPerlin: BigNumber;
      originalRaritySeed: BigNumber;
      currentTileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      originalPerlin: BigNumber;
      originalRaritySeed: BigNumber;
      currentTileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        originalPerlin: BigNumber;
        originalRaritySeed: BigNumber;
        currentTileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: number;
      };
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        originalPerlin: BigNumber;
        originalRaritySeed: BigNumber;
        currentTileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: BigNumber;
        2: BigNumber;
        3: number;
      };
    }>;

    getTouchedTiles(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    seed(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "seed()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    transitions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "transitions(uint8,uint8)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    wheatScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "wheatScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    woodScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "woodScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    worldScale(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldScale()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    worldWidth(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldWidth()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  cachedTiles(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    originalPerlin: BigNumber;
    originalRaritySeed: BigNumber;
    currentTileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  "cachedTiles(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    originalPerlin: BigNumber;
    originalRaritySeed: BigNumber;
    currentTileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  getCachedTile(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    originalPerlin: BigNumber;
    originalRaritySeed: BigNumber;
    currentTileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  "getCachedTile(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    originalPerlin: BigNumber;
    originalRaritySeed: BigNumber;
    currentTileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  getTouchedTiles(
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  "getTouchedTiles()"(
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  seed(overrides?: CallOverrides): Promise<BigNumber>;

  "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

  touchedTiles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "touchedTiles(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  transitions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "transitions(uint8,uint8)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wheatScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "wheatScore(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  woodScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "woodScore(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  worldScale(overrides?: CallOverrides): Promise<BigNumber>;

  "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

  worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

  "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      originalPerlin: BigNumber;
      originalRaritySeed: BigNumber;
      currentTileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      originalPerlin: BigNumber;
      originalRaritySeed: BigNumber;
      currentTileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      originalPerlin: BigNumber;
      originalRaritySeed: BigNumber;
      currentTileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      originalPerlin: BigNumber;
      originalRaritySeed: BigNumber;
      currentTileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    getTouchedTiles(
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    transitions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transitions(uint8,uint8)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wheatScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wheatScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    woodScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "woodScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTouchedTiles(overrides?: CallOverrides): Promise<BigNumber>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<BigNumber>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transitions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transitions(uint8,uint8)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wheatScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "wheatScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    woodScore(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "woodScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTouchedTiles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "seed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transitions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transitions(uint8,uint8)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wheatScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wheatScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    woodScore(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "woodScore(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    worldScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldScale()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worldWidth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldWidth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
