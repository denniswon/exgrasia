/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PerlinInterface extends ethers.utils.Interface {
  functions: {
    "computePerlin(uint32,uint32,uint32,uint32)": FunctionFragment;
    "getCorners(uint32,uint32,uint32)": FunctionFragment;
    "getGradientAt(uint32,uint32,uint32,uint32)": FunctionFragment;
    "getSingleScalePerlin(uint32,uint32,uint32,uint32)": FunctionFragment;
    "getWeight(uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
    "smoothStep(int128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computePerlin",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCorners",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGradientAt",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSingleScalePerlin",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeight",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "smoothStep",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "computePerlin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCorners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGradientAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSingleScalePerlin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWeight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "smoothStep", data: BytesLike): Result;

  events: {};
}

export class Perlin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PerlinInterface;

  functions: {
    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [
        [number, number],
        [number, number],
        [number, number],
        [number, number]
      ];
    }>;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [
        [number, number],
        [number, number],
        [number, number],
        [number, number]
      ];
    }>;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [number, number];
    }>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [number, number];
    }>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    smoothStep(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  computePerlin(
    x: BigNumberish,
    y: BigNumberish,
    seed: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computePerlin(uint32,uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    seed: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCorners(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[number, number], [number, number], [number, number], [number, number]]
  >;

  "getCorners(uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[number, number], [number, number], [number, number], [number, number]]
  >;

  getGradientAt(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  "getGradientAt(uint32,uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  getSingleScalePerlin(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWeight(
    cornerX: BigNumberish,
    cornerY: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWeight(uint32,uint32,uint32,uint32,uint32)"(
    cornerX: BigNumberish,
    cornerY: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  smoothStep(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "smoothStep(int128)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number], [number, number], [number, number], [number, number]]
    >;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number], [number, number], [number, number], [number, number]]
    >;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smoothStep(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smoothStep(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    smoothStep(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
