/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ValhallaStorageInterface extends ethers.utils.Interface {
  functions: {
    "adminAddress()": FunctionFragment;
    "planets(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planets",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "planets", data: BytesLike): Result;

  events: {};
}

export class ValhallaStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValhallaStorageInterface;

  functions: {
    adminAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "adminAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    planets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      mintedAtTimestamp: BigNumber;
      originalWinner: string;
      roundId: number;
      level: number;
      rank: number;
      biome: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    "planets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      mintedAtTimestamp: BigNumber;
      originalWinner: string;
      roundId: number;
      level: number;
      rank: number;
      biome: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;
  };

  adminAddress(overrides?: CallOverrides): Promise<string>;

  "adminAddress()"(overrides?: CallOverrides): Promise<string>;

  planets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    mintedAtTimestamp: BigNumber;
    originalWinner: string;
    roundId: number;
    level: number;
    rank: number;
    biome: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  "planets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    mintedAtTimestamp: BigNumber;
    originalWinner: string;
    roundId: number;
    level: number;
    rank: number;
    biome: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  callStatic: {
    adminAddress(overrides?: CallOverrides): Promise<string>;

    "adminAddress()"(overrides?: CallOverrides): Promise<string>;

    planets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      mintedAtTimestamp: BigNumber;
      originalWinner: string;
      roundId: number;
      level: number;
      rank: number;
      biome: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    "planets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      mintedAtTimestamp: BigNumber;
      originalWinner: string;
      roundId: number;
      level: number;
      rank: number;
      biome: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;
  };

  filters: {};

  estimateGas: {
    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "adminAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    planets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "planets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "adminAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    planets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "planets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
