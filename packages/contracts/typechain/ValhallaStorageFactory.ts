/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ValhallaStorage } from "./ValhallaStorage";

export class ValhallaStorageFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ValhallaStorage> {
    return super.deploy(overrides || {}) as Promise<ValhallaStorage>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ValhallaStorage {
    return super.attach(address) as ValhallaStorage;
  }
  connect(signer: Signer): ValhallaStorageFactory {
    return super.connect(signer) as ValhallaStorageFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ValhallaStorage {
    return new Contract(address, _abi, signerOrProvider) as ValhallaStorage;
  }
}

const _abi = [
  {
    inputs: [],
    name: "adminAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "planets",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mintedAtTimestamp",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "originalWinner",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "roundId",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "level",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "rank",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "biome",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610162806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806326c1e7501461003b578063fc6f9468146100e9575b600080fd5b61009c610049366004610114565b60016020819052600091825260409091208054918101546002909101546001600160a01b0381169060ff600160a01b8204811691600160a81b8104821691600160b01b8204811691600160b81b90041687565b6040805197885260208801969096526001600160a01b039094169486019490945260ff91821660608601528116608085015291821660a08401521660c082015260e0015b60405180910390f35b6000546100fc906001600160a01b031681565b6040516001600160a01b0390911681526020016100e0565b600060208284031215610125578081fd5b503591905056fea26469706673582212205a7d9439c7168121502e99d48240a7ab2ca1fb2b1b6152f4cb7144b20128ef4064736f6c63430008040033";
