/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TinyWorldInterface extends ethers.utils.Interface {
  functions: {
    "cachedTiles(uint256,uint256)": FunctionFragment;
    "computePerlin(uint32,uint32,uint32,uint32)": FunctionFragment;
    "dist(tuple,tuple)": FunctionFragment;
    "getCachedTile(tuple)": FunctionFragment;
    "getCorners(uint32,uint32,uint32)": FunctionFragment;
    "getGradientAt(uint32,uint32,uint32,uint32)": FunctionFragment;
    "getPlayerIds()": FunctionFragment;
    "getPlayerLocations()": FunctionFragment;
    "getSingleScalePerlin(uint32,uint32,uint32,uint32)": FunctionFragment;
    "getTile(tuple)": FunctionFragment;
    "getTouchedTiles()": FunctionFragment;
    "getWeight(uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
    "initPlayerLocation()": FunctionFragment;
    "initialize(uint256,uint256,uint256)": FunctionFragment;
    "movePlayer(tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "perlinMax()": FunctionFragment;
    "playerIds(uint256)": FunctionFragment;
    "playerInited(address)": FunctionFragment;
    "playerLocation(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "seed()": FunctionFragment;
    "smoothStep(int128)": FunctionFragment;
    "touchedTiles(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vecs(uint256,uint256)": FunctionFragment;
    "vecsDenom()": FunctionFragment;
    "worldScale()": FunctionFragment;
    "worldWidth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cachedTiles",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computePerlin",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dist",
    values: [
      { x: BigNumberish; y: BigNumberish },
      { x: BigNumberish; y: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCachedTile",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getCorners",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGradientAt",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerLocations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSingleScalePerlin",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTile",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getTouchedTiles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWeight",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initPlayerLocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "movePlayer",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "perlinMax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerInited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "playerLocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "smoothStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "touchedTiles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vecs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vecsDenom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "worldScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldWidth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cachedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePerlin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCachedTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCorners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGradientAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerLocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSingleScalePerlin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTouchedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWeight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initPlayerLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "movePlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perlinMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerInited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "smoothStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "touchedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vecs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vecsDenom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "worldScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "worldWidth", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PlayerUpdated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerUpdated"): EventFragment;
}

export class TinyWorld extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TinyWorldInterface;

  functions: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    dist(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "dist(tuple,tuple)"(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        emoji: string;
        name: string;
        owner: string;
        smartContract: string;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: string;
        9: string;
      };
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        emoji: string;
        name: string;
        owner: string;
        smartContract: string;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: string;
        9: string;
      };
    }>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [
        [number, number],
        [number, number],
        [number, number],
        [number, number]
      ];
    }>;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [
        [number, number],
        [number, number],
        [number, number],
        [number, number]
      ];
    }>;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [number, number];
    }>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [number, number];
    }>;

    getPlayerIds(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getPlayerLocations(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    "getPlayerLocations()"(overrides?: CallOverrides): Promise<{
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[];
    }>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTouchedTiles(overrides?: CallOverrides): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        emoji: string;
        name: string;
        owner: string;
        smartContract: string;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: string;
        9: string;
      }[];
    }>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        emoji: string;
        name: string;
        owner: string;
        smartContract: string;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: string;
        9: string;
      }[];
    }>;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    initPlayerLocation(overrides?: Overrides): Promise<ContractTransaction>;

    "initPlayerLocation()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    movePlayer(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "movePlayer(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    perlinMax(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "perlinMax()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    playerIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    playerInited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "playerInited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    playerLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    seed(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "seed()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    smoothStep(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    vecsDenom(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    worldScale(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldScale()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    worldWidth(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldWidth()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  cachedTiles(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    emoji: string;
    name: string;
    owner: string;
    smartContract: string;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
    3: number;
    4: number;
    5: string;
    6: string;
    7: string;
    8: string;
  }>;

  "cachedTiles(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    emoji: string;
    name: string;
    owner: string;
    smartContract: string;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
    3: number;
    4: number;
    5: string;
    6: string;
    7: string;
    8: string;
  }>;

  computePerlin(
    x: BigNumberish,
    y: BigNumberish,
    seed: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "computePerlin(uint32,uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    seed: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dist(
    a: { x: BigNumberish; y: BigNumberish },
    b: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dist(tuple,tuple)"(
    a: { x: BigNumberish; y: BigNumberish },
    b: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCachedTile(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    perlin: [BigNumber, BigNumber];
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    emoji: string;
    name: string;
    owner: string;
    smartContract: string;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: string;
    7: string;
    8: string;
    9: string;
  }>;

  "getCachedTile(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    perlin: [BigNumber, BigNumber];
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    emoji: string;
    name: string;
    owner: string;
    smartContract: string;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: number;
    4: number;
    5: number;
    6: string;
    7: string;
    8: string;
    9: string;
  }>;

  getCorners(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[number, number], [number, number], [number, number], [number, number]]
  >;

  "getCorners(uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[number, number], [number, number], [number, number], [number, number]]
  >;

  getGradientAt(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  "getGradientAt(uint32,uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  getPlayerIds(overrides?: CallOverrides): Promise<string[]>;

  "getPlayerIds()"(overrides?: CallOverrides): Promise<string[]>;

  getPlayerLocations(
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  "getPlayerLocations()"(
    overrides?: CallOverrides
  ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

  getSingleScalePerlin(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTile(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getTile(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTouchedTiles(
    overrides?: CallOverrides
  ): Promise<
    {
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: string;
      9: string;
    }[]
  >;

  "getTouchedTiles()"(
    overrides?: CallOverrides
  ): Promise<
    {
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: string;
      9: string;
    }[]
  >;

  getWeight(
    cornerX: BigNumberish,
    cornerY: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWeight(uint32,uint32,uint32,uint32,uint32)"(
    cornerX: BigNumberish,
    cornerY: BigNumberish,
    x: BigNumberish,
    y: BigNumberish,
    scale: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initPlayerLocation(overrides?: Overrides): Promise<ContractTransaction>;

  "initPlayerLocation()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialize(
    _seed: BigNumberish,
    _worldWidth: BigNumberish,
    _worldScale: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,uint256)"(
    _seed: BigNumberish,
    _worldWidth: BigNumberish,
    _worldScale: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  movePlayer(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "movePlayer(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  perlinMax(overrides?: CallOverrides): Promise<number>;

  "perlinMax()"(overrides?: CallOverrides): Promise<number>;

  playerIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "playerIds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  playerInited(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "playerInited(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playerLocation(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "playerLocation(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  seed(overrides?: CallOverrides): Promise<BigNumber>;

  "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

  smoothStep(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "smoothStep(int128)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  touchedTiles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    emoji: string;
    name: string;
    owner: string;
    smartContract: string;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
    3: number;
    4: number;
    5: string;
    6: string;
    7: string;
    8: string;
  }>;

  "touchedTiles(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    temperatureType: number;
    altitudeType: number;
    emoji: string;
    name: string;
    owner: string;
    smartContract: string;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
    3: number;
    4: number;
    5: string;
    6: string;
    7: string;
    8: string;
  }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vecs(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "vecs(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  vecsDenom(overrides?: CallOverrides): Promise<number>;

  "vecsDenom()"(overrides?: CallOverrides): Promise<number>;

  worldScale(overrides?: CallOverrides): Promise<BigNumber>;

  "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

  worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

  "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dist(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dist(tuple,tuple)"(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number], [number, number], [number, number], [number, number]]
    >;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number], [number, number], [number, number], [number, number]]
    >;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getPlayerIds(overrides?: CallOverrides): Promise<string[]>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<string[]>;

    getPlayerLocations(
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    "getPlayerLocations()"(
      overrides?: CallOverrides
    ): Promise<{ x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber }[]>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
      4: number;
      5: number;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    getTouchedTiles(
      overrides?: CallOverrides
    ): Promise<
      {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        emoji: string;
        name: string;
        owner: string;
        smartContract: string;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: string;
        9: string;
      }[]
    >;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<
      {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        temperatureType: number;
        altitudeType: number;
        emoji: string;
        name: string;
        owner: string;
        smartContract: string;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
        4: number;
        5: number;
        6: string;
        7: string;
        8: string;
        9: string;
      }[]
    >;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initPlayerLocation(overrides?: CallOverrides): Promise<void>;

    "initPlayerLocation()"(overrides?: CallOverrides): Promise<void>;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    movePlayer(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "movePlayer(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    perlinMax(overrides?: CallOverrides): Promise<number>;

    "perlinMax()"(overrides?: CallOverrides): Promise<number>;

    playerIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    playerInited(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "playerInited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playerLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    smoothStep(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      temperatureType: number;
      altitudeType: number;
      emoji: string;
      name: string;
      owner: string;
      smartContract: string;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    vecsDenom(overrides?: CallOverrides): Promise<number>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<number>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PlayerUpdated(undefined: null, undefined: null): EventFilter;
  };

  estimateGas: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dist(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dist(tuple,tuple)"(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerIds(overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerLocations(overrides?: CallOverrides): Promise<BigNumber>;

    "getPlayerLocations()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTouchedTiles(overrides?: CallOverrides): Promise<BigNumber>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<BigNumber>;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initPlayerLocation(overrides?: Overrides): Promise<BigNumber>;

    "initPlayerLocation()"(overrides?: Overrides): Promise<BigNumber>;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    movePlayer(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "movePlayer(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    perlinMax(overrides?: CallOverrides): Promise<BigNumber>;

    "perlinMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    playerIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerInited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerInited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerLocation(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    smoothStep(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vecsDenom(overrides?: CallOverrides): Promise<BigNumber>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computePerlin(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      seed: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dist(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dist(tuple,tuple)"(
      a: { x: BigNumberish; y: BigNumberish },
      b: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCorners(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCorners(uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGradientAt(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGradientAt(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPlayerIds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayerLocations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayerLocations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSingleScalePerlin(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSingleScalePerlin(uint32,uint32,uint32,uint32)"(
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTouchedTiles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeight(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWeight(uint32,uint32,uint32,uint32,uint32)"(
      cornerX: BigNumberish,
      cornerY: BigNumberish,
      x: BigNumberish,
      y: BigNumberish,
      scale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initPlayerLocation(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initPlayerLocation()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    movePlayer(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "movePlayer(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perlinMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "perlinMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerIds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerInited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerInited(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerLocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerLocation(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    seed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "seed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    smoothStep(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "smoothStep(int128)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    touchedTiles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "touchedTiles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vecsDenom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worldScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldScale()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worldWidth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldWidth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
