/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TinyQuestMasterInterface extends ethers.utils.Interface {
  functions: {
    "farmingLevel0()": FunctionFragment;
    "farmingLevel1()": FunctionFragment;
    "fishingLevel0()": FunctionFragment;
    "fishingLevel1()": FunctionFragment;
    "miningLevel0()": FunctionFragment;
    "tileABI(tuple)": FunctionFragment;
    "tileDescription(tuple)": FunctionFragment;
    "tileEmoji(tuple)": FunctionFragment;
    "tileName(tuple)": FunctionFragment;
    "viewQuests()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "farmingLevel0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmingLevel1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fishingLevel0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fishingLevel1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "miningLevel0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tileABI",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "tileDescription",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "tileEmoji",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "tileName",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "viewQuests",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "farmingLevel0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingLevel1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fishingLevel0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fishingLevel1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "miningLevel0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tileABI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tileDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tileEmoji", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tileName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewQuests", data: BytesLike): Result;

  events: {};
}

export class TinyQuestMaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TinyQuestMasterInterface;

  functions: {
    farmingLevel0(overrides?: Overrides): Promise<ContractTransaction>;

    "farmingLevel0()"(overrides?: Overrides): Promise<ContractTransaction>;

    farmingLevel1(overrides?: Overrides): Promise<ContractTransaction>;

    "farmingLevel1()"(overrides?: Overrides): Promise<ContractTransaction>;

    fishingLevel0(overrides?: Overrides): Promise<ContractTransaction>;

    "fishingLevel0()"(overrides?: Overrides): Promise<ContractTransaction>;

    fishingLevel1(overrides?: Overrides): Promise<ContractTransaction>;

    "fishingLevel1()"(overrides?: Overrides): Promise<ContractTransaction>;

    miningLevel0(overrides?: Overrides): Promise<ContractTransaction>;

    "miningLevel0()"(overrides?: Overrides): Promise<ContractTransaction>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    viewQuests(overrides?: CallOverrides): Promise<{
      0: {
        levelDescription: string;
        quests: string[];
        0: string;
        1: string[];
      }[];
    }>;

    "viewQuests()"(overrides?: CallOverrides): Promise<{
      0: {
        levelDescription: string;
        quests: string[];
        0: string;
        1: string[];
      }[];
    }>;
  };

  farmingLevel0(overrides?: Overrides): Promise<ContractTransaction>;

  "farmingLevel0()"(overrides?: Overrides): Promise<ContractTransaction>;

  farmingLevel1(overrides?: Overrides): Promise<ContractTransaction>;

  "farmingLevel1()"(overrides?: Overrides): Promise<ContractTransaction>;

  fishingLevel0(overrides?: Overrides): Promise<ContractTransaction>;

  "fishingLevel0()"(overrides?: Overrides): Promise<ContractTransaction>;

  fishingLevel1(overrides?: Overrides): Promise<ContractTransaction>;

  "fishingLevel1()"(overrides?: Overrides): Promise<ContractTransaction>;

  miningLevel0(overrides?: Overrides): Promise<ContractTransaction>;

  "miningLevel0()"(overrides?: Overrides): Promise<ContractTransaction>;

  tileABI(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileABI(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  tileDescription(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileDescription(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  tileEmoji(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileEmoji(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  tileName(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileName(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  viewQuests(
    overrides?: CallOverrides
  ): Promise<
    { levelDescription: string; quests: string[]; 0: string; 1: string[] }[]
  >;

  "viewQuests()"(
    overrides?: CallOverrides
  ): Promise<
    { levelDescription: string; quests: string[]; 0: string; 1: string[] }[]
  >;

  callStatic: {
    farmingLevel0(overrides?: CallOverrides): Promise<void>;

    "farmingLevel0()"(overrides?: CallOverrides): Promise<void>;

    farmingLevel1(overrides?: CallOverrides): Promise<void>;

    "farmingLevel1()"(overrides?: CallOverrides): Promise<void>;

    fishingLevel0(overrides?: CallOverrides): Promise<void>;

    "fishingLevel0()"(overrides?: CallOverrides): Promise<void>;

    fishingLevel1(overrides?: CallOverrides): Promise<void>;

    "fishingLevel1()"(overrides?: CallOverrides): Promise<void>;

    miningLevel0(overrides?: CallOverrides): Promise<void>;

    "miningLevel0()"(overrides?: CallOverrides): Promise<void>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    viewQuests(
      overrides?: CallOverrides
    ): Promise<
      { levelDescription: string; quests: string[]; 0: string; 1: string[] }[]
    >;

    "viewQuests()"(
      overrides?: CallOverrides
    ): Promise<
      { levelDescription: string; quests: string[]; 0: string; 1: string[] }[]
    >;
  };

  filters: {};

  estimateGas: {
    farmingLevel0(overrides?: Overrides): Promise<BigNumber>;

    "farmingLevel0()"(overrides?: Overrides): Promise<BigNumber>;

    farmingLevel1(overrides?: Overrides): Promise<BigNumber>;

    "farmingLevel1()"(overrides?: Overrides): Promise<BigNumber>;

    fishingLevel0(overrides?: Overrides): Promise<BigNumber>;

    "fishingLevel0()"(overrides?: Overrides): Promise<BigNumber>;

    fishingLevel1(overrides?: Overrides): Promise<BigNumber>;

    "fishingLevel1()"(overrides?: Overrides): Promise<BigNumber>;

    miningLevel0(overrides?: Overrides): Promise<BigNumber>;

    "miningLevel0()"(overrides?: Overrides): Promise<BigNumber>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewQuests(overrides?: CallOverrides): Promise<BigNumber>;

    "viewQuests()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    farmingLevel0(overrides?: Overrides): Promise<PopulatedTransaction>;

    "farmingLevel0()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    farmingLevel1(overrides?: Overrides): Promise<PopulatedTransaction>;

    "farmingLevel1()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    fishingLevel0(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fishingLevel0()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    fishingLevel1(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fishingLevel1()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    miningLevel0(overrides?: Overrides): Promise<PopulatedTransaction>;

    "miningLevel0()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewQuests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "viewQuests()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
