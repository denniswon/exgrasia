/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestTileContractInterface extends ethers.utils.Interface {
  functions: {
    "logger()": FunctionFragment;
    "logger_a()": FunctionFragment;
    "logger_b()": FunctionFragment;
    "logger_c()": FunctionFragment;
    "logger_d()": FunctionFragment;
    "test(string)": FunctionFragment;
    "test_a(uint256)": FunctionFragment;
    "test_b(bytes32)": FunctionFragment;
    "test_c(bytes)": FunctionFragment;
    "test_d(address)": FunctionFragment;
    "tileABI(tuple)": FunctionFragment;
    "tileDescription(tuple)": FunctionFragment;
    "tileEmoji(tuple)": FunctionFragment;
    "tileName(tuple)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "logger", values?: undefined): string;
  encodeFunctionData(functionFragment: "logger_a", values?: undefined): string;
  encodeFunctionData(functionFragment: "logger_b", values?: undefined): string;
  encodeFunctionData(functionFragment: "logger_c", values?: undefined): string;
  encodeFunctionData(functionFragment: "logger_d", values?: undefined): string;
  encodeFunctionData(functionFragment: "test", values: [string]): string;
  encodeFunctionData(
    functionFragment: "test_a",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "test_b", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "test_c", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "test_d", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tileABI",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "tileDescription",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "tileEmoji",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "tileName",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;

  decodeFunctionResult(functionFragment: "logger", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logger_a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logger_b", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logger_c", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logger_d", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_a", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_b", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_c", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test_d", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tileABI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tileDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tileEmoji", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tileName", data: BytesLike): Result;

  events: {};
}

export class TestTileContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestTileContractInterface;

  functions: {
    logger(overrides?: CallOverrides): Promise<{
      0: string;
      1: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "logger()"(overrides?: CallOverrides): Promise<{
      0: string;
      1: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    logger_a(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "logger_a()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    logger_b(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "logger_b()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    logger_c(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "logger_c()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    logger_d(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "logger_d()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    test(inp: string, overrides?: Overrides): Promise<ContractTransaction>;

    "test(string)"(
      inp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    test_a(
      inp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "test_a(uint256)"(
      inp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    test_b(inp: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    "test_b(bytes32)"(
      inp: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    test_c(inp: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

    "test_c(bytes)"(
      inp: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    test_d(inp: string, overrides?: Overrides): Promise<ContractTransaction>;

    "test_d(address)"(
      inp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  logger(overrides?: CallOverrides): Promise<{
    0: string;
    1: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
  }>;

  "logger()"(overrides?: CallOverrides): Promise<{
    0: string;
    1: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
  }>;

  logger_a(overrides?: CallOverrides): Promise<BigNumber>;

  "logger_a()"(overrides?: CallOverrides): Promise<BigNumber>;

  logger_b(overrides?: CallOverrides): Promise<string>;

  "logger_b()"(overrides?: CallOverrides): Promise<string>;

  logger_c(overrides?: CallOverrides): Promise<string>;

  "logger_c()"(overrides?: CallOverrides): Promise<string>;

  logger_d(overrides?: CallOverrides): Promise<string>;

  "logger_d()"(overrides?: CallOverrides): Promise<string>;

  test(inp: string, overrides?: Overrides): Promise<ContractTransaction>;

  "test(string)"(
    inp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  test_a(
    inp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "test_a(uint256)"(
    inp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  test_b(inp: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "test_b(bytes32)"(
    inp: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  test_c(inp: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  "test_c(bytes)"(
    inp: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  test_d(inp: string, overrides?: Overrides): Promise<ContractTransaction>;

  "test_d(address)"(
    inp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tileABI(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileABI(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  tileDescription(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileDescription(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  tileEmoji(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileEmoji(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  tileName(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  "tileName(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    logger(overrides?: CallOverrides): Promise<{
      0: string;
      1: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "logger()"(overrides?: CallOverrides): Promise<{
      0: string;
      1: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    logger_a(overrides?: CallOverrides): Promise<BigNumber>;

    "logger_a()"(overrides?: CallOverrides): Promise<BigNumber>;

    logger_b(overrides?: CallOverrides): Promise<string>;

    "logger_b()"(overrides?: CallOverrides): Promise<string>;

    logger_c(overrides?: CallOverrides): Promise<string>;

    "logger_c()"(overrides?: CallOverrides): Promise<string>;

    logger_d(overrides?: CallOverrides): Promise<string>;

    "logger_d()"(overrides?: CallOverrides): Promise<string>;

    test(inp: string, overrides?: CallOverrides): Promise<void>;

    "test(string)"(inp: string, overrides?: CallOverrides): Promise<void>;

    test_a(inp: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "test_a(uint256)"(
      inp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_b(inp: BytesLike, overrides?: CallOverrides): Promise<void>;

    "test_b(bytes32)"(inp: BytesLike, overrides?: CallOverrides): Promise<void>;

    test_c(inp: BytesLike, overrides?: CallOverrides): Promise<void>;

    "test_c(bytes)"(inp: BytesLike, overrides?: CallOverrides): Promise<void>;

    test_d(inp: string, overrides?: CallOverrides): Promise<void>;

    "test_d(address)"(inp: string, overrides?: CallOverrides): Promise<void>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    logger(overrides?: CallOverrides): Promise<BigNumber>;

    "logger()"(overrides?: CallOverrides): Promise<BigNumber>;

    logger_a(overrides?: CallOverrides): Promise<BigNumber>;

    "logger_a()"(overrides?: CallOverrides): Promise<BigNumber>;

    logger_b(overrides?: CallOverrides): Promise<BigNumber>;

    "logger_b()"(overrides?: CallOverrides): Promise<BigNumber>;

    logger_c(overrides?: CallOverrides): Promise<BigNumber>;

    "logger_c()"(overrides?: CallOverrides): Promise<BigNumber>;

    logger_d(overrides?: CallOverrides): Promise<BigNumber>;

    "logger_d()"(overrides?: CallOverrides): Promise<BigNumber>;

    test(inp: string, overrides?: Overrides): Promise<BigNumber>;

    "test(string)"(inp: string, overrides?: Overrides): Promise<BigNumber>;

    test_a(inp: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "test_a(uint256)"(
      inp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    test_b(inp: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "test_b(bytes32)"(
      inp: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    test_c(inp: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "test_c(bytes)"(inp: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    test_d(inp: string, overrides?: Overrides): Promise<BigNumber>;

    "test_d(address)"(inp: string, overrides?: Overrides): Promise<BigNumber>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    logger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "logger()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logger_a(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "logger_a()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logger_b(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "logger_b()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logger_c(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "logger_c()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logger_d(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "logger_d()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test(inp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "test(string)"(
      inp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    test_a(
      inp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "test_a(uint256)"(
      inp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    test_b(
      inp: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "test_b(bytes32)"(
      inp: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    test_c(
      inp: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "test_c(bytes)"(
      inp: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    test_d(inp: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "test_d(address)"(
      inp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tileABI(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileABI(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tileDescription(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileDescription(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tileEmoji(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileEmoji(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tileName(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tileName(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
